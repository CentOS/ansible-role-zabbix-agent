- name: Importing specific distro variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - common.yml

- name: Installing Zabbix packages
  yum: 
    name: "{{ zabbix_pkgs_list }}"
    state: latest 
  register: pkg_install

- name: Configuring iptables rules
  include_role:
    name: iptables
    tasks_from: custom-policy
  vars:
    iptables_policy_name: zabbix-agent
    iptables_protocol: tcp
    iptables_port: "10050"
    iptables_source: "{{ zabbix_server_ip }}"
  tags:
    - iptables

- name: Installing selinux dependency packages
  yum: 
    name: "{{ pkgs_list }}" 
    state: installed
  tags:
    - packages

# FIXME !!!!
# Temporary disabling selinux policies on el10 due to zabbix_agent_t running now unconfined
# see https://gitlab.com/redhat/centos-stream/rpms/selinux-policy/-/commit/0ebb49f06303e47a2dec7fb12ac952cc5a407e2d
# some modules/types are now removed from BaseOS selinux-policy-targeted pkg so disabling for now but to be fixed/added back somehow
- name: Distributing custom selinux policies
  copy: 
    src: "selinux/{{ ansible_distribution_major_version }}/{{ item }}" 
    dest: "/etc/selinux/centos/{{ item }}"
  register: sepolicy
  with_items:
    - centos-zabbix-agent.pp
  when:
    - ansible_selinux.status == 'enabled'
    - ansible_distribution_major_version|int < 10

- name: reload custom selinux files
  shell: /usr/sbin/semodule -u "/etc/selinux/centos/centos-zabbix-agent.pp"
  when: 
    - ansible_selinux.status == "enabled" 
    - sepolicy is changed
    - ansible_distribution_major_version|int < 10

- name: Allowing zabbix to connect to network resources
  seboolean: 
    name: zabbix_can_network 
    persistent: yes 
    state: yes
  when: 
    - ansible_selinux.status == "enabled" 
    - ansible_distribution_major_version|int < 10

- name: Distributing PSK file for TLS
  template:
    src: zabbix_agent.psk.j2
    dest: /etc/zabbix/zabbix_agent.psk
    owner: zabbix
    group: zabbix
    mode: 0640
  notify: restart_zabbix_agent
  when: zabbix_agent_tls
  register: zabbix_psk

- name: Configuring Zabbix agentd
  template: 
    src: zabbix_agentd.conf.j2 
    dest: /etc/zabbix/zabbix_agentd.conf
  notify: restart_zabbix_agent
  register: zabbix_agent_config
    
- name: Forcing a Zabbix service restart directly
  service: 
    name: zabbix-agent
    state: restarted 
    enabled: yes
  when: zabbix_agent_config is changed  

- name: Ensuring we have a directory to put zabbix scripts
  file:
    state: directory
    path: /usr/lib/zabbix
    mode: 0770
    owner: zabbix
    group: zabbix

- name: Adding some other conf files under zabbix_agentd.d
  template: 
    src: "{{ item }}.j2" 
    dest: "/etc/zabbix/zabbix_agentd.d/{{ item }}"
    owner: zabbix
    mode: 0666
  notify: restart_zabbix_agent
  with_items:
    - interface-alias.conf

- name: Enabling Zabbix service
  service: 
    name: "{{ item }}" 
    state: started 
    enabled: yes
  with_items: 
    - zabbix-agent

- include_tasks: tools.yml

# Ensuring we talk to zabbix API to reflect PSK change
- name: Updating PSK on Zabbix Server through API
  command:
    cmd: "/usr/libexec/centos/zapi-update-agent-psk
         -n {{ inventory_hostname }}
         -p {{ zabbix_agent_tls_psk }}
         -i {{ zabbix_agent_tls_psk_identity }}
         "
  delegate_to: "{{ zabbix_api_srv }}"
  when: 
    - zabbix_psk is changed 
    - pkg_install is not changed
    - zabbix_api_srv is defined
    - zabbix_api_srv != 'None'

# applying host macros if defined
- name: Reflecting host macros in zabbix
  command:
    cmd: "/usr/libexec/centos/zabbix_host_tool
         -n {{ inventory_hostname }} 
         -m {{ item.name }} 
         -v {{ item.value }}
         "
  with_items: "{{ zabbix_host_macros }}"
  register: zbx_macros_result
  changed_when: "zbx_macros_result.rc == 2"
  failed_when: "zbx_macros_result.rc == 1"
  delegate_to: "{{ zabbix_api_srv }}"       
  when: 
    - zabbix_api_srv is defined
    - zabbix_api_srv != 'None'

- name: Generating ansible facts
  template:
    src: agent.fact.j2
    dest: /etc/ansible/facts.d/agent.fact
  register: agent_facts  
  tags:
    - templates

- name: Forcing reloading ansible facts if needed
  setup:
    filter: ansible_local
  when: agent_facts is changed  

# Updating zabbix agent inventory if changed
- name: Reflecting agent inventory changes
  command:
    cmd: "/usr/libexec/centos/zapi-inventory-update
         --node {{ inventory_hostname }} 
         --inventory_key {{ item.name }} 
         --inventory_value '{{ item.value }}'
         "
  loop:
    - { name: 'hw_arch', value: '{{ ansible_local.agent.zabbix.hw_arch }}' }
    - { name: 'type', value: '{{ ansible_local.agent.zabbix.type }}' }
    - { name: 'vendor', value: '{{ ansible_local.agent.zabbix.vendor }}' }
    - { name: 'model', value: '{{ ansible_local.agent.zabbix.model }}' }
    - { name: 'serialno_a', value: '{{ ansible_local.agent.zabbix.serialno_a }}' }
    - { name: 'os_full', value: '{{ ansible_local.agent.zabbix.os_full }}' }
    - { name: 'os_short', value: '{{ ansible_local.agent.zabbix.os_short }}' }
  loop_control:
    label: "{{ inventory_hostname }}"
  delegate_to: "{{ zabbix_api_srv }}"       
  when: 
    - zabbix_api_srv is defined
    - zabbix_api_srv != 'None'
    - agent_facts is changed

- name: Generating geoip helper script
  template:
    src: scripts/geoip_query.j2
    dest: /usr/libexec/centos/geoip_query
    mode: '0750'
  register: geoip_query_script  
  tags:
    - geoip
  when: zabbix_agent_geoip  

- name: Fetching geoip informations
  command:
    cmd: /usr/libexec/centos/geoip_query
  when: geoip_query_script is changed  

- name: Forcing reloading ansible location facts if needed
  setup:
    filter: ansible_local
  when: geoip_query_script is changed

# Updating zabbix agent inventory if changed
- name: Reflecting agent location changes
  command:
    cmd: "/usr/libexec/centos/zapi-inventory-update
         --node {{ inventory_hostname }} 
         --inventory_key {{ item.name }} 
         --inventory_value '{{ item.value }}'
         "
  loop:
    - { name: 'location_lat', value: '{{ ansible_local.location.zabbix.location_lat }}' }
    - { name: 'location_lon', value: '{{ ansible_local.location.zabbix.location_lon }}' }
    - { name: 'site_country', value: '{{ ansible_local.location.zabbix.site_country }}' }
    - { name: 'site_state', value: '{{ ansible_local.location.zabbix.site_state }}' }
    - { name: 'site_city', value: '{{ ansible_local.location.zabbix.site_city }}' }
    - { name: 'location', value: '{{ ansible_local.location.zabbix.location }}' }
  loop_control:
    label: "{{ inventory_hostname }}"
  delegate_to: "{{ zabbix_api_srv }}"       
  when: 
    - zabbix_api_srv is defined
    - zabbix_api_srv != 'None'
    - geoip_query_script is changed


